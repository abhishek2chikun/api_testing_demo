{
  "issue_key": "KAN-4",
  "language": "java",
  "gate": {
    "should_proceed": true,
    "reason": "OpenAPI URL is present and accessible, and key endpoints are clearly defined."
  },
  "test_cases": {
    "src/test/java/com/example/api/tests/OrdersApiTest.java": "```java\npackage com.example.api.tests;\n\nimport io.restassured.RestAssured;\nimport io.restassured.http.ContentType;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Optional;\n\nimport static io.restassured.RestAssured.*;\nimport static org.hamcrest.Matchers.*;\n\npublic class OrdersApiTest {\n\n    @BeforeAll\n    public static void setup() {\n        String fallback = \"http://localhost:8002\";  // replace with first server URL if available\n        String baseFromSysProp = System.getProperty(\"baseUrl\");\n        String baseFromEnv = System.getenv(\"BASE_URL\");\n        String resolved = Optional.ofNullable(baseFromSysProp)\n                                  .orElse(Optional.ofNullable(baseFromEnv)\n                                                 .orElse(fallback));\n        RestAssured.baseURI = resolved;\n    }\n\n    /**\n     * Test for placing an order successfully.\n     */\n    @Test\n    public void testPlaceOrderSuccess() {\n        String orderPayload = \"{ \\\"tradingsymbol\\\": \\\"INFY\\\", \\\"quantity\\\": 10, \\\"order_type\\\": \\\"LIMIT\\\", \\\"price\\\": 1500 }\";\n\n        given()\n            .contentType(ContentType.JSON)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .body(orderPayload)\n        .when()\n            .post(\"/orders\")\n        .then()\n            .statusCode(200)\n            .body(\"order_id\", notNullValue())\n            .body(\"status\", equalTo(\"SUCCESS\"));\n    }\n\n    /**\n     * Test for placing an order with missing required fields.\n     */\n    @Test\n    public void testPlaceOrderMissingFields() {\n        String orderPayload = \"{ \\\"tradingsymbol\\\": \\\"INFY\\\" }\"; // Missing quantity and order_type\n\n        given()\n            .contentType(ContentType.JSON)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .body(orderPayload)\n        .when()\n            .post(\"/orders\")\n        .then()\n            .statusCode(422)\n            .body(\"status\", equalTo(\"error\"))\n            .body(\"message\", containsString(\"Validation Error\"));\n    }\n\n    /**\n     * Test for retrieving orders for a user successfully.\n     */\n    @Test\n    public void testListOrdersSuccess() {\n        given()\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n        .when()\n            .get(\"/orders\")\n        .then()\n            .statusCode(200)\n            .body(\"orders\", notNullValue())\n            .body(\"orders\", hasSize(greaterThanOrEqualTo(0)));\n    }\n\n    /**\n     * Test for retrieving orders with invalid user_id.\n     */\n    @Test\n    public void testListOrdersInvalidUserId() {\n        given()\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", -1) // Invalid user_id\n        .when()\n            .get(\"/orders\")\n        .then()\n            .statusCode(404)\n            .body(\"status\", equalTo(\"error\"))\n            .body(\"message\", containsString(\"User not found\"));\n    }\n\n    /**\n     * Test for retrieving a specific order successfully.\n     */\n    @Test\n    public void testGetOrderSuccess() {\n        String orderId = \"validOrderId\"; // Replace with a valid order ID\n\n        given()\n            .pathParam(\"order_id\", orderId)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n        .when()\n            .get(\"/orders/{order_id}\")\n        .then()\n            .statusCode(200)\n            .body(\"order_id\", equalTo(orderId))\n            .body(\"status\", equalTo(\"SUCCESS\"));\n    }\n\n    /**\n     * Test for retrieving a non-existent order.\n     */\n    @Test\n    public void testGetOrderNotFound() {\n        String orderId = \"nonExistentOrderId\"; // Non-existent order ID\n\n        given()\n            .pathParam(\"order_id\", orderId)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n        .when()\n            .get(\"/orders/{order_id}\")\n        .then()\n            .statusCode(404)\n            .body(\"status\", equalTo(\"error\"))\n            .body(\"message\", containsString(\"Order not found\"));\n    }\n\n    /**\n     * Test for health check endpoint.\n     */\n    @Test\n    public void testHealthCheck() {\n        when()\n            .get(\"/health\")\n        .then()\n            .statusCode(200)\n            .body(\"status\", equalTo(\"healthy\"));\n    }\n\n    /**\n     * Test for root endpoint to get service metadata.\n     */\n    @Test\n    public void testRootEndpoint() {\n        when()\n            .get(\"/\")\n        .then()\n            .statusCode(200)\n            .body(\"available_brokers\", notNullValue());\n    }\n}",
    "src/test/resources/config.properties": "# Configuration file for API tests\nbaseUrl=http://localhost:8002",
    "pom.xml": "```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n    <artifactId>api-tests</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <properties>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter</artifactId>\n            <version>5.8.1</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.rest-assured</groupId>\n            <artifactId>rest-assured</artifactId>\n            <version>4.4.0</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.hamcrest</groupId>\n            <artifactId>hamcrest</artifactId>\n            <version>2.2</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>2.12.3</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.22.2</version>\n            </plugin>\n        </plugins>\n    </build>\n</project>",
    "README.md": "# API Tests for Orders Service\n\n## Overview\nThis project contains automated tests for the Orders Service API using JUnit5 and Rest-Assured.\n\n## Requirements\n- Java 11 or higher\n- Maven\n\n## Running the Tests\n1. Clone the repository.\n2. Navigate to the project directory.\n3. Run the tests using Maven:\n   ```bash\n   mvn test\n   ```\n4. To specify a different base URL, use the `-DbaseUrl=<your_base_url>` option:\n   ```bash\n   mvn test -DbaseUrl=http://your.api.url\n   ```\n\n## Test Coverage\n- Happy path scenarios for placing and retrieving orders.\n- Validation error scenarios for missing or invalid fields.\n- Not found scenarios for non-existent resources.\n- Health check and root endpoint tests."
  },
  "reviewer": {
    "score": 0.85,
    "syntax_ok": true,
    "coverage_score": 0.9,
    "criteria_score": 0.8,
    "notes": "The tests cover most of the endpoints and scenarios, but there are missing tests for error responses following API standards and authentication/authorization enforcement. Additionally, the test for placing an order does not cover all validation rules specified in the Epic. The test for retrieving orders does not check for the 'use_cache' query parameter. The README.md does not mention the need for authentication tokens, which is a requirement in the technical notes.",
    "files": {
      "src/test/java/com/example/api/tests/OrdersApiTest.java": "// Updated test file with additional tests and corrections\n\npackage com.example.api.tests;\n\nimport io.restassured.RestAssured;\nimport io.restassured.http.ContentType;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Optional;\n\nimport static io.restassured.RestAssured.*;\nimport static org.hamcrest.Matchers.*;\n\npublic class OrdersApiTest {\n\n    @BeforeAll\n    public static void setup() {\n        String fallback = \"http://localhost:8002\";  // replace with first server URL if available\n        String baseFromSysProp = System.getProperty(\"baseUrl\");\n        String baseFromEnv = System.getenv(\"BASE_URL\");\n        String resolved = Optional.ofNullable(baseFromSysProp)\n                                  .orElse(Optional.ofNullable(baseFromEnv)\n                                                 .orElse(fallback));\n        RestAssured.baseURI = resolved;\n    }\n\n    @Test\n    public void testPlaceOrderSuccess() {\n        String orderPayload = \"{ \\\"tradingsymbol\\\": \\\"INFY\\\", \\\"quantity\\\": 10, \\\"order_type\\\": \\\"LIMIT\\\", \\\"price\\\": 1500 }\";\n\n        given()\n            .contentType(ContentType.JSON)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .queryParam(\"use_cache\", true)\n            .body(orderPayload)\n        .when()\n            .post(\"/orders\")\n        .then()\n            .statusCode(200)\n            .body(\"order_id\", notNullValue())\n            .body(\"status\", equalTo(\"SUCCESS\"));\n    }\n\n    @Test\n    public void testPlaceOrderMissingFields() {\n        String orderPayload = \"{ \\\"tradingsymbol\\\": \\\"INFY\\\" }\"; // Missing quantity and order_type\n\n        given()\n            .contentType(ContentType.JSON)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .queryParam(\"use_cache\", true)\n            .body(orderPayload)\n        .when()\n            .post(\"/orders\")\n        .then()\n            .statusCode(422)\n            .body(\"status\", equalTo(\"error\"))\n            .body(\"message\", containsString(\"Validation Error\"));\n    }\n\n    @Test\n    public void testListOrdersSuccess() {\n        given()\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .queryParam(\"use_cache\", true)\n        .when()\n            .get(\"/orders\")\n        .then()\n            .statusCode(200)\n            .body(\"orders\", notNullValue())\n            .body(\"orders\", hasSize(greaterThanOrEqualTo(0)));\n    }\n\n    @Test\n    public void testListOrdersInvalidUserId() {\n        given()\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", -1) // Invalid user_id\n            .queryParam(\"use_cache\", true)\n        .when()\n            .get(\"/orders\")\n        .then()\n            .statusCode(404)\n            .body(\"status\", equalTo(\"error\"))\n            .body(\"message\", containsString(\"User not found\"));\n    }\n\n    @Test\n    public void testGetOrderSuccess() {\n        String orderId = \"validOrderId\"; // Replace with a valid order ID\n\n        given()\n            .pathParam(\"order_id\", orderId)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .queryParam(\"use_cache\", true)\n        .when()\n            .get(\"/orders/{order_id}\")\n        .then()\n            .statusCode(200)\n            .body(\"order_id\", equalTo(orderId))\n            .body(\"status\", equalTo(\"SUCCESS\"));\n    }\n\n    @Test\n    public void testGetOrderNotFound() {\n        String orderId = \"nonExistentOrderId\"; // Non-existent order ID\n\n        given()\n            .pathParam(\"order_id\", orderId)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .queryParam(\"use_cache\", true)\n        .when()\n            .get(\"/orders/{order_id}\")\n        .then()\n            .statusCode(404)\n            .body(\"status\", equalTo(\"error\"))\n            .body(\"message\", containsString(\"Order not found\"));\n    }\n\n    @Test\n    public void testHealthCheck() {\n        when()\n            .get(\"/health\")\n        .then()\n            .statusCode(200)\n            .body(\"status\", equalTo(\"healthy\"));\n    }\n\n    @Test\n    public void testRootEndpoint() {\n        when()\n            .get(\"/\")\n        .then()\n            .statusCode(200)\n            .body(\"available_brokers\", notNullValue());\n    }\n\n    // New test for error response structure\n    @Test\n    public void testErrorResponseStructure() {\n        String orderPayload = \"{ \\\"tradingsymbol\\\": \\\"INVALID\\\", \\\"quantity\\\": -10, \\\"order_type\\\": \\\"LIMIT\\\", \\\"price\\\": 1500 }\";\n\n        given()\n            .contentType(ContentType.JSON)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .body(orderPayload)\n        .when()\n            .post(\"/orders\")\n        .then()\n            .statusCode(422)\n            .body(\"status\", equalTo(\"error\"))\n            .body(\"message\", containsString(\"Validation Error\"))\n            .body(\"detail\", notNullValue());\n    }\n\n    // New test for authentication enforcement\n    @Test\n    public void testAuthenticationRequired() {\n        given()\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n        .when()\n            .get(\"/orders\")\n        .then()\n            .statusCode(404)\n            .body(\"status\", equalTo(\"error\"))\n            .body(\"message\", containsString(\"Missing credentials\"));\n    }\n}\n"
    }
  },
  "review_average": 0.9,
  "review_threshold": 0.9,
  "refiner_output": {
    "src/test/java/com/example/api/tests/OrdersApiTest.java": "// Updated test file with additional tests and corrections\n\npackage com.example.api.tests;\n\nimport io.restassured.RestAssured;\nimport io.restassured.http.ContentType;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Optional;\n\nimport static io.restassured.RestAssured.*;\nimport static org.hamcrest.Matchers.*;\n\npublic class OrdersApiTest {\n\n    @BeforeAll\n    public static void setup() {\n        String fallback = \"http://localhost:8002\";  // replace with first server URL if available\n        String baseFromSysProp = System.getProperty(\"baseUrl\");\n        String baseFromEnv = System.getenv(\"BASE_URL\");\n        String resolved = Optional.ofNullable(baseFromSysProp)\n                                  .orElse(Optional.ofNullable(baseFromEnv)\n                                                 .orElse(fallback));\n        RestAssured.baseURI = resolved;\n    }\n\n    @Test\n    public void testPlaceOrderSuccess() {\n        String orderPayload = \"{ \\\"tradingsymbol\\\": \\\"INFY\\\", \\\"quantity\\\": 10, \\\"order_type\\\": \\\"LIMIT\\\", \\\"price\\\": 1500 }\";\n\n        given()\n            .contentType(ContentType.JSON)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .queryParam(\"use_cache\", true)\n            .body(orderPayload)\n        .when()\n            .post(\"/orders\")\n        .then()\n            .statusCode(200)\n            .body(\"order_id\", notNullValue())\n            .body(\"status\", equalTo(\"SUCCESS\"));\n    }\n\n    @Test\n    public void testPlaceOrderMissingFields() {\n        String orderPayload = \"{ \\\"tradingsymbol\\\": \\\"INFY\\\" }\"; // Missing quantity and order_type\n\n        given()\n            .contentType(ContentType.JSON)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .queryParam(\"use_cache\", true)\n            .body(orderPayload)\n        .when()\n            .post(\"/orders\")\n        .then()\n            .statusCode(422)\n            .body(\"status\", equalTo(\"error\"))\n            .body(\"message\", containsString(\"Validation Error\"));\n    }\n\n    @Test\n    public void testListOrdersSuccess() {\n        given()\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .queryParam(\"use_cache\", true)\n        .when()\n            .get(\"/orders\")\n        .then()\n            .statusCode(200)\n            .body(\"orders\", notNullValue())\n            .body(\"orders\", hasSize(greaterThanOrEqualTo(0)));\n    }\n\n    @Test\n    public void testListOrdersInvalidUserId() {\n        given()\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", -1) // Invalid user_id\n            .queryParam(\"use_cache\", true)\n        .when()\n            .get(\"/orders\")\n        .then()\n            .statusCode(404)\n            .body(\"status\", equalTo(\"error\"))\n            .body(\"message\", containsString(\"User not found\"));\n    }\n\n    @Test\n    public void testGetOrderSuccess() {\n        String orderId = \"validOrderId\"; // Replace with a valid order ID\n\n        given()\n            .pathParam(\"order_id\", orderId)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .queryParam(\"use_cache\", true)\n        .when()\n            .get(\"/orders/{order_id}\")\n        .then()\n            .statusCode(200)\n            .body(\"order_id\", equalTo(orderId))\n            .body(\"status\", equalTo(\"SUCCESS\"));\n    }\n\n    @Test\n    public void testGetOrderNotFound() {\n        String orderId = \"nonExistentOrderId\"; // Non-existent order ID\n\n        given()\n            .pathParam(\"order_id\", orderId)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .queryParam(\"use_cache\", true)\n        .when()\n            .get(\"/orders/{order_id}\")\n        .then()\n            .statusCode(404)\n            .body(\"status\", equalTo(\"error\"))\n            .body(\"message\", containsString(\"Order not found\"));\n    }\n\n    @Test\n    public void testHealthCheck() {\n        when()\n            .get(\"/health\")\n        .then()\n            .statusCode(200)\n            .body(\"status\", equalTo(\"healthy\"));\n    }\n\n    @Test\n    public void testRootEndpoint() {\n        when()\n            .get(\"/\")\n        .then()\n            .statusCode(200)\n            .body(\"available_brokers\", notNullValue());\n    }\n\n    // New test for error response structure\n    @Test\n    public void testErrorResponseStructure() {\n        String orderPayload = \"{ \\\"tradingsymbol\\\": \\\"INVALID\\\", \\\"quantity\\\": -10, \\\"order_type\\\": \\\"LIMIT\\\", \\\"price\\\": 1500 }\";\n\n        given()\n            .contentType(ContentType.JSON)\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n            .body(orderPayload)\n        .when()\n            .post(\"/orders\")\n        .then()\n            .statusCode(422)\n            .body(\"status\", equalTo(\"error\"))\n            .body(\"message\", containsString(\"Validation Error\"))\n            .body(\"detail\", notNullValue());\n    }\n\n    // New test for authentication enforcement\n    @Test\n    public void testAuthenticationRequired() {\n        given()\n            .queryParam(\"broker\", \"upstox\")\n            .queryParam(\"user_id\", 1)\n        .when()\n            .get(\"/orders\")\n        .then()\n            .statusCode(401)\n            .body(\"status\", equalTo(\"error\"))\n            .body(\"message\", containsString(\"Missing credentials\"));\n    }\n}\n",
    "src/test/resources/config.properties": "# Configuration file for API tests\nbaseUrl=http://localhost:8002\n",
    "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n    <artifactId>api-tests</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <properties>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter</artifactId>\n            <version>5.8.1</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.rest-assured</groupId>\n            <artifactId>rest-assured</artifactId>\n            <version>4.4.0</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.hamcrest</groupId>\n            <artifactId>hamcrest</artifactId>\n            <version>2.2</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>2.12.3</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.22.2</version>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n",
    "README.md": "# API Tests for Orders Service\n\n## Overview\nThis project contains automated tests for the Orders Service API using JUnit5 and Rest-Assured.\n\n## Requirements\n- Java 11 or higher\n- Maven\n\n## Running the Tests\n1. Clone the repository.\n2. Navigate to the project directory.\n3. Run the tests using Maven:\n   ```bash\n   mvn test\n   ```\n4. To specify a different base URL, use the `-DbaseUrl=<your_base_url>` option:\n   ```bash\n   mvn test -DbaseUrl=http://your.api.url\n   ```\n\n## Test Coverage\n- Happy path scenarios for placing and retrieving orders.\n- Validation error scenarios for missing or invalid fields.\n- Not found scenarios for non-existent resources.\n- Health check and root endpoint tests.\n- Authentication enforcement and error response structure validation.\n"
  },
  "refinement_metadata": {
    "triggered": true,
    "applied": true,
    "threshold": 0.9,
    "average_score": 0.9,
    "coverage_score": 0.9,
    "criteria_score": 0.8,
    "syntax_ok": true,
    "changes": [
      {
        "path": "src/test/java/com/example/api/tests/OrdersApiTest.java",
        "change": "modified",
        "before_sha256": "e02f6527de84e123321718a04934f27616a37005a4de62059549f215de6b8228",
        "after_sha256": "a854a14e6181c159630a0cac299e77e1465d1cfdc4b261c8c33e180509c21b76",
        "before_lines": 176,
        "after_lines": 176
      },
      {
        "path": "src/test/resources/config.properties",
        "change": "modified",
        "before_sha256": "81a07df53f540e7302bd90caa43fb2c03ea040819f4cb6ea22f2c9a2b3cac206",
        "after_sha256": "8f0efdc1ebd02bcf7b0f5b6df952d914d1897eb26a3157ae3b3bae2da074c43d",
        "before_lines": 2,
        "after_lines": 2
      },
      {
        "path": "pom.xml",
        "change": "modified",
        "before_sha256": "62896b3328a5da8b904fe95245383ac15b614311a0c68fce5288bf170db1f376",
        "after_sha256": "10abb71b7b235e1e1ccaffb010c3389566037d526ba0f168cad9a9af6835bb44",
        "before_lines": 47,
        "after_lines": 47
      },
      {
        "path": "README.md",
        "change": "modified",
        "before_sha256": "986f61540b37080e2fc3ebc20dffb691d05f92ecbca07e0cbc3f1594a77f0b18",
        "after_sha256": "3ad301255f2de652a4012a4ba6df6d96a91a6056721c0111cef39bd76aecb2d9",
        "before_lines": 26,
        "after_lines": 27
      }
    ]
  },
  "contract_summary": {
    "has_openapi_spec": true,
    "openapi_url": "http://localhost:8002/openapi.json",
    "title": "Orders Service",
    "version": "3.1.0",
    "paths_count": 4,
    "endpoints_listed_count": null
  }
}